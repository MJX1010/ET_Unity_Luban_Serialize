using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using ET.Generator.Luban;
using Microsoft.CodeAnalysis;

namespace ET.Generator;

public static class LubanSer {
    public const string s_lubanSerIde_Macro = "";
    public const string s_unityEditor_Macro = "";
    public const string s_macro_Not = "";
    public const string s_macro_Start = "";
    public const string s_macro_End = "";
    
    public const string s_outputXmlFileNameExt = "_Generated";
    public const string s_outputXmlFileExtension = ".xml";

    public const string s_lubanSerEditor_AttrKey_ResPath = "resPath";
    public const string s_lubanSerTable_AttrKey_ResPath = "fileName";
    
    public const string s_lubanSerEditor_EmptyDataDirName = "_DontRemove";
    public const string s_lubanSerEditor_UnitySo_DefResPathRoot = "Config/Editor/";
    public const string s_lubanSerEditor_UnitySo_DefResPath = $"{s_lubanSerEditor_UnitySo_DefResPathRoot}{s_lubanSerEditor_EmptyDataDirName}";

    public const string s_lubanSerEditor_genCsFile = "LubanSchemaEditorGenIntermediateClass";
    public const string s_lubanSerEditor_genFinalMsg = "Generated by LubanSchemaEditor Generator";
    
    public const string s_lubanSerTable_genCsFile = "LubanSchemaTableGenIntermediateClass";
    public const string s_lubanSerTable_genFinalMsg = "Generated by LubanSchemaTable Generator";

    public const string s_lubanSerEditor_TableFilePrefix = "Tb";
}

// 定义用于 XML 序列化的模块信息
[Serializable]
[XmlRoot("module")]
public class LubanModuleInfo
{
    [XmlAttribute("name")]
    public string? Name { get; set; }

    // 使用 XmlChoiceIdentifier 来标识不同的子元素类型
    [XmlElement("bean", typeof(LubanTypeInfo))]
    [XmlElement("enum", typeof(LubanTypeInfo))]
    [XmlChoiceIdentifier("LubanTypeIdentifiers")]
    public LubanTypeInfo[] LubanTypes { get; set; } = Array.Empty<LubanTypeInfo>();

    [XmlIgnore]
    public LubanTypeKind[] LubanTypeIdentifiers { get; set; } = Array.Empty<LubanTypeKind>();
}

// 定义用于 XML 序列化的类型信息
[Serializable]
public class LubanTypeInfo
{
    [XmlAttribute("name")]
    public string? Name { get; set; }

    [XmlAttribute("valueType", Namespace = "")]
    public string? IsValueType { get; set; } // "0" for class, "1" for struct

    [XmlElement("var")]
    public List<LubanFieldInfo> LubanFields { get; set; } = new List<LubanFieldInfo>();
}

// 定义字段信息
[Serializable]
public class LubanFieldInfo
{
    [XmlAttribute("name")]
    public string? Name { get; set; }

    [XmlAttribute("type")]
    public string? Type { get; set; } // 适用于类和结构的字段
    
    [XmlAttribute("value")]
    public string? Value { get; set; } // 适用于枚举字段的值
}

// 定义类型标识符，用于选择不同的 XML 元素
public enum LubanTypeKind
{
    [XmlEnum("bean")]
    Bean,

    [XmlEnum("enum")]
    Enum
}

public class BeanInfo
{
    public string Name { get; set; } = string.Empty;
    public TypeKind TypeKind { get; set; }
    public LubanTypeKind LubanTypeKind { get; set; }
    public List<BeanFieldInfo> Fields { get; set; } = new();
}

public class BeanFieldInfo
{
    public string Name { get; set; } = string.Empty;
    public string? Type { get; set; }
    public string? Value { get; set; }
}

public class EnvInfo {
    //环境设置
    public string projectDir => PathUtils.GetFullProjectDir(string.Empty);
    
    public string unityProjectDir => Path.GetFullPath(Path.Combine(projectDir, "./Unity/"));
    public string unityAssetsProjectDir => Path.Combine(unityProjectDir, "./Unity/Assets/");

    public string lubanPartyToUnityRootRelativeDir = "../../Unity/";
    public string lubanPartyToUnityAssetsRelativeDir = "../../Unity/Assets/";
    public string lubanPartyToUnityTbDataRelativeDir = "../../Unity/Assets/Bundles/Config/TableData/";
    
    public string lubanPartyDir => Path.GetFullPath(Path.Combine(projectDir, "./Tools/LubanSer_UnitySo/"));
    public string outputXmlForCodePath => Path.Combine(lubanPartyDir, "./Defines/Xml_Code/");
    public string outputXmlForDataPath => Path.Combine(lubanPartyDir, "./Defines/Xml_Data/");
    public string cmdEnvCfgPath => Path.Combine(lubanPartyDir, "./Env/env.conf");
    public string cmdDefPath => Path.Combine(lubanPartyDir, "./Env/dotnet-runtime-8.0.10-win-x64/dotnet.exe"); //ET8.1只支持dotnet8, 不支持dotnet9

    public string cmdPath {
        get {
            var path = CmdUtils.GetCmdEnvPath(cmdEnvCfgPath);
            if (string.IsNullOrEmpty(path)) {
                return cmdDefPath;
            }
            if (path.Equals("dotnet")) {
                return path;
            }
            return Path.Combine(lubanPartyDir, path);
        }
    }

    public string lubanDllPath => Path.Combine(lubanPartyDir, "./LubanDlls/Luban.dll");
    public string lubanCodeCfgPath => Path.Combine(lubanPartyDir, "./luban_code.conf");
    public string lubanDataCfgPath => Path.Combine(lubanPartyDir, "./luban_data.conf");
    
    public string lubanCodeCSharpOutPath => Path.Combine(lubanPartyDir, "./Generated/Code/CSharp/");
    public string lubanCodeJsonOutPath => Path.Combine(lubanPartyDir, "./Generated/Code/Json/");
    public string lubanDataBytesOutPath => Path.Combine(lubanPartyDir, "./Generated/Data/Bytes");
    public string lubanDataJsonOutPath => Path.Combine(lubanPartyDir, "./Generated/Data/Json");
    
    public string lubanDataUnityPath => Path.Combine(lubanPartyDir, lubanPartyToUnityTbDataRelativeDir);

    public string arguments {
        get {
            bool isWin = CmdUtils.IsEnvWindows();
            return isWin ? arguments_win_code_csharp : arguments_mac_code_csharp;
        }
    }
    public string arguments_win_csharp_bin => $"{lubanDllPath} -t client -c cs-bin -d bin --conf {this.lubanDataCfgPath} -x outputCodeDir={lubanCodeCSharpOutPath} -x outputDataDir={lubanDataBytesOutPath}";
    public string arguments_mac_csharp_bin => $"\"{lubanDllPath}\" -t client -c cs-bin -d bin --conf \"{this.lubanDataCfgPath}\" -x outputCodeDir=\"{lubanCodeCSharpOutPath}\" -x outputDataDir=\"{lubanDataBytesOutPath}\"";
    
    public string arguments_win_all_json => $"{lubanDllPath} -t client -c cs-simple-json -d json --conf {this.lubanDataCfgPath} -x outputCodeDir={lubanCodeJsonOutPath} -x outputDataDir={lubanDataJsonOutPath}";
    public string arguments_mac_all_json => $"\"{lubanDllPath}\" -t client -c cs-simple-json -d json --conf \"{this.lubanDataCfgPath}\" -x outputCodeDir=\"{lubanCodeJsonOutPath}\" -x outputDataDir=\"{lubanDataJsonOutPath}\"";
    
    public string arguments_win_code_csharp => $"{lubanDllPath} -t client -c cs-bin --conf {this.lubanCodeCfgPath} -x outputCodeDir={lubanCodeCSharpOutPath}";
    public string arguments_mac_code_csharp => $"\"{lubanDllPath}\" -t client -c cs-bin --conf \"{this.lubanCodeCfgPath}\" -x outputCodeDir=\"{lubanCodeCSharpOutPath}\"";

    public void PrintPaths(GeneratorExecutionContext context) {
        var envInfo = $"projectDir: {projectDir}, \n lubanPartyDir:{this.lubanPartyDir}, \n cmdPath: {cmdPath}";
        LubanSerUtils.LogInContext(context, envInfo, "003");
    }
}