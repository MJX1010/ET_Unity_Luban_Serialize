using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Xml.Serialization;
using ET.Generator.Luban;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Share.LubanSerGen.Utils;

namespace ET.Generator;

public static class LubanSer {
    public const string s_lubanSerIde_Macro = "";
    public const string s_unityEditor_Macro = "";
    public const string s_macro_Not = "";
    public const string s_macro_Start = "";
    public const string s_macro_End = "";
    
    public const string s_outputXmlFileNameExt = "_Generated";
    public const string s_outputXmlFileExtension = ".xml";

    public const string s_lubanSerEditor_AttrKey_ResPath = "resPath";
    public const string s_lubanSerTable_AttrKey_ResPath = "fileName";
    
    public const string s_lubanSerEditor_EmptyDataDirName = "_DontRemove";
    public const string s_lubanSerEditor_UnitySo_DefResPathRoot = "Config/Editor/";
    public const string s_lubanSerEditor_UnitySo_DefResPath = $"{s_lubanSerEditor_UnitySo_DefResPathRoot}{s_lubanSerEditor_EmptyDataDirName}";

    public const string s_lubanSerEditor_genCsFile = "LubanSchemaEditorGenIntermediateClass";
    public const string s_lubanSerEditor_genFinalMsg = "Generated by LubanSchemaEditor Generator";
    
    public const string s_lubanSerTable_genCsFile = "LubanSchemaTableGenIntermediateClass";
    public const string s_lubanSerTable_genFinalMsg = "Generated by LubanSchemaTable Generator";

    public const string s_lubanSerEditor_TableFilePrefix = "Tb";
}

// 定义用于 XML 序列化的模块信息
[Serializable]
[XmlRoot("module")]
public class LubanModuleInfo
{
    [XmlAttribute("name")]
    public string? Name { get; set; }

    // 使用 XmlChoiceIdentifier 来标识不同的子元素类型
    [XmlElement("bean", typeof(LubanTypeInfo))]
    [XmlElement("enum", typeof(LubanTypeInfo))]
    [XmlChoiceIdentifier("LubanTypeIdentifiers")]
    public LubanTypeInfo[] LubanTypes { get; set; } = Array.Empty<LubanTypeInfo>();

    [XmlIgnore]
    public LubanTypeKind[] LubanTypeIdentifiers { get; set; } = Array.Empty<LubanTypeKind>();
}

// 定义用于 XML 序列化的类型信息
[Serializable]
public class LubanTypeInfo
{
    [XmlAttribute("name")]
    public string? Name { get; set; }

    [XmlAttribute("valueType", Namespace = "")]
    public string? IsValueType { get; set; } // "0" for class, "1" for struct

    [XmlElement("var")]
    public List<LubanFieldInfo> LubanFields { get; set; } = new List<LubanFieldInfo>();
}

// 定义字段信息
[Serializable]
public class LubanFieldInfo
{
    [XmlAttribute("name")]
    public string? Name { get; set; }

    [XmlAttribute("type")]
    public string? Type { get; set; } // 适用于类和结构的字段
    
    [XmlAttribute("value")]
    public string? Value { get; set; } // 适用于枚举字段的值
}

// 定义类型标识符，用于选择不同的 XML 元素
public enum LubanTypeKind
{
    [XmlEnum("bean")]
    Bean,

    [XmlEnum("enum")]
    Enum
}

public class BeanInfo
{
    public string Name { get; set; } = string.Empty;
    public TypeKind TypeKind { get; set; }
    public LubanTypeKind LubanTypeKind { get; set; }
    public List<BeanFieldInfo> Fields { get; set; } = new();
}

public class BeanFieldInfo
{
    public string Name { get; set; } = string.Empty;
    public string? Type { get; set; }
    public string? Value { get; set; }
}

public class EnvInfo {
    private EnvInfo() { }
    
    public static readonly string ETUnityLubanTempDirName = "ET_Unity_LubanSer_Temp";
    private static string _unityProjectDirectory = string.Empty;
    private GeneratorExecutionContext _context;
    private System.Diagnostics.Process _currentProcess;
    public EnvInfo(GeneratorExecutionContext context) {
        _context = context;
        SetUnityProjectDirectory(context);
        
        if (!string.IsNullOrEmpty(this.projectDir)) {
            if (!Directory.Exists(this.outputXmlForCodePath)) {
                Directory.CreateDirectory(this.outputXmlForCodePath);
            }
            if (!Directory.Exists(this.outputXmlForDataPath)) {
                Directory.CreateDirectory(this.outputXmlForDataPath);
            }
            if (!Directory.Exists(this.lubanCodeCSharpOutPath)) {
                Directory.CreateDirectory(this.lubanCodeCSharpOutPath);
            }
            if (!Directory.Exists(this.lubanCodeJsonOutPath)) {
                Directory.CreateDirectory(this.lubanCodeJsonOutPath);
            }
            if (!Directory.Exists(this.lubanDataBytesOutPath)) {
                Directory.CreateDirectory(this.lubanDataBytesOutPath);
            }
            if (!Directory.Exists(this.lubanDataJsonOutPath)) {
                Directory.CreateDirectory(this.lubanDataJsonOutPath);
            }
        }
    }
    
    public void SetUnityProjectDirectory(GeneratorExecutionContext context) {
        _currentProcess = System.Diagnostics.Process.GetCurrentProcess();
        LubanSerUtils.LogInContext(context, $"CurrentProcess: P:{_currentProcess.Id} {_currentProcess.ProcessName}", "003");
        LubanSerUtils.LogToFile($"CurrentProcess: P:{_currentProcess.Id} {_currentProcess.ProcessName}", $"from_unity");
        
        string currentAssemblyName = context.Compilation.Assembly.Identity.Name;
        LubanSerUtils.LogInContext(context, $"CurrentAssemblyName: {currentAssemblyName}", "003");
        LubanSerUtils.LogToFile($"CurrentAssemblyName: {currentAssemblyName}", $"from_unity");
        
        if (string.IsNullOrEmpty(_unityProjectDirectory)) {
            GetUnityProjectDirFromCompile(context);
        }
        
        if (string.IsNullOrEmpty(_unityProjectDirectory)) {
            //GetUnityProjectDirFromEnvVar(context);
        }
        
        if (string.IsNullOrEmpty(_unityProjectDirectory)) {
            GetUnityProjectDirFromAddFiles(context);
        }
        
        if (string.IsNullOrEmpty(_unityProjectDirectory)) {
            //GetUnityProjectDirFromTempFile(context);
        }
    }

    private void GetUnityProjectDirFromEnvVar(GeneratorExecutionContext context) {
        var enviromentDir = Environment.GetEnvironmentVariable("UNITY_PROJECT_DIR");
        if (!string.IsNullOrEmpty(enviromentDir)) {
            _unityProjectDirectory = enviromentDir;
            if (!string.IsNullOrEmpty(_unityProjectDirectory)) {
                LubanSerUtils.LogInContext(context, $"Unity Project Directory From Env: {_unityProjectDirectory}", "003");
                LubanSerUtils.LogToFile($"Unity Project Directory From Env: {_unityProjectDirectory} P:{_currentProcess.Id} {_currentProcess.ProcessName}", $"from_unity");
            }
        }
    }

    private void GetUnityProjectDirFromTempFile(GeneratorExecutionContext context) {
        string tempDir = Path.GetTempPath(); //win: C:\Users\(用户名)\AppData\Local\Temp
        var unityProcessArray = System.Diagnostics.Process.GetProcessesByName("Unity");
        if (unityProcessArray != null && unityProcessArray.Length > 0) {
            for (int i = 0; i < unityProcessArray.Length; i++) {
                var unityProcess = unityProcessArray[i];
                /*
                try {
                    string projectDir = unityProcess.StartInfo.EnvironmentVariables["UNITY_PROJECT_DIR"];
                    LubanSerUtils.LogToFile($"unity process: {unityProcess.Id},  EnviromentDir: {projectDir}", $"from_unity");
                }
                catch (Exception e) {
                    LubanSerUtils.LogToFile($"unity process: {unityProcess.Id},  failed to get EnviromentDir", $"from_unity");
                }
                */

                string tempPath = Path.Combine(tempDir, $"{ETUnityLubanTempDirName}/unity_project_mapping_{unityProcess.Id}.txt");
                if (File.Exists(tempPath)) {
                    try {
                        string content = File.ReadAllText(tempPath);
                        if (!string.IsNullOrEmpty(content) && Directory.Exists(content)) {
                            LubanSerUtils.LogToFile($"Unity Project Directory From TempFile: unity process: {unityProcess.Id},  read path from txt: {content}", $"from_unity");
                            _unityProjectDirectory = content;
                            break;
                        }
                    }
                    catch (Exception ex) {
                        LubanSerUtils.LogToFile($"Unity Project Directory From TempFile: unity process: {unityProcess.Id},  failed to read path from txt", $"from_unity");
                    }
                }
            }
        }
    }

    private void GetUnityProjectDirFromCompile(GeneratorExecutionContext context) {
        var unityProjectPathClass = context.Compilation.SyntaxTrees
                .SelectMany(tree => tree.GetRoot().DescendantNodes())
                .OfType<ClassDeclarationSyntax>()
                .FirstOrDefault(cls => cls.Identifier.Text == "UnityProjectPath");

        if (unityProjectPathClass != null)
        {
            var field = unityProjectPathClass.Members
                    .OfType<FieldDeclarationSyntax>()
                    .FirstOrDefault(f => f.Declaration.Variables.Any(v => v.Identifier.Text == "Path"));

            if (field != null)
            {
                _unityProjectDirectory = field.Declaration.Variables.First().Initializer.Value.ToString().Trim('"');
                LubanSerUtils.LogInContext(context, $"Unity Project Directory From SG: {_unityProjectDirectory}", "003");
                LubanSerUtils.LogToFile($"Unity Project Directory From SG: {_unityProjectDirectory}", $"from_unity");
            }
        }
        else {
            //LubanSerUtils.LogInContext(context, $"Not Found Unity Project Directory From SG", "003");
            //LubanSerUtils.LogToFile($"Not Found Unity Project Directory From SG", $"from_unity");
        }
    }
    
    private void GetUnityProjectDirFromAddFiles(GeneratorExecutionContext context) {
        string unityProjectDirectoryTemp = string.Empty;
        foreach (var additionalFile in context.AdditionalFiles) {
            var filePath = additionalFile.Path;
            if (!string.IsNullOrEmpty(filePath) && filePath.EndsWith("_UnityProjectDirectory")) {
                unityProjectDirectoryTemp = filePath.Replace("_UnityProjectDirectory", "");
                break;
            }
        }
        if (!string.IsNullOrEmpty(unityProjectDirectoryTemp)) {
            _unityProjectDirectory = unityProjectDirectoryTemp;
            LubanSerUtils.LogInContext(context, $"Unity Project Directory From AddFile: {_unityProjectDirectory}", "003");
            LubanSerUtils.LogToFile($"Unity Project Directory From AddFile: {_unityProjectDirectory}", $"from_et_rider");
        }
    }

    public string projectDir {
        get {
            
            //return "./";
            //return PathUtils.GetFullProjectDir(string.Empty); //这里是获取当前代码所在目录，会在编译Dll时生成到Dll中作为常量
            if(string.IsNullOrEmpty(_unityProjectDirectory)) {
                SetUnityProjectDirectory(_context);
            }
            if (!string.IsNullOrEmpty(_unityProjectDirectory)) {
                var path = Path.Combine(_unityProjectDirectory, "../");
                if (Directory.Exists(path)) {
                    return path;
                }
            }
            return string.Empty;
        }
    }

    public bool isValid() => !string.IsNullOrEmpty(this.projectDir);

    public string unityProjectRootDir => Path.GetFullPath(Path.Combine(projectDir, "./Unity/"));
    public string unityAssetsProjectDir => Path.Combine(unityProjectRootDir, "./Unity/Assets/");

    public string lubanPartyToUnityRootRelativeDir = "../../Unity/";
    public string lubanPartyToUnityAssetsRelativeDir = "../../Unity/Assets/";
    public string lubanPartyToUnityTbDataRelativeDir = "../../Unity/Assets/Bundles/Config/TableData/";
    
    public string lubanPartyDir => Path.GetFullPath(Path.Combine(projectDir, "./Tools/LubanSer_UnitySo/"));
    public string outputXmlForCodePath => Path.Combine(lubanPartyDir, "./Defines/Xml_Code/");
    public string outputXmlForDataPath => Path.Combine(lubanPartyDir, "./Defines/Xml_Data/");
    public string cmdEnvCfgPath => Path.Combine(lubanPartyDir, "./Env/env.conf");
    public string cmdDefPath => Path.Combine(lubanPartyDir, "./Env/dotnet-runtime-8.0.10-win-x64/dotnet.exe"); //ET8.1只支持dotnet8, 不支持dotnet9

    public string cmdPath {
        get {
            var path = CmdUtils.GetCmdEnvPath(cmdEnvCfgPath);
            if (string.IsNullOrEmpty(path)) {
                return cmdDefPath;
            }
            if (path.Equals("dotnet")) {
                return path;
            }
            return Path.Combine(lubanPartyDir, path);
        }
    }

    public string lubanDllPath => Path.Combine(lubanPartyDir, "./LubanDlls/Luban.dll");
    public string lubanCodeCfgPath => Path.Combine(lubanPartyDir, "./luban_code.conf");
    public string lubanDataCfgPath => Path.Combine(lubanPartyDir, "./luban_data.conf");
    
    public string lubanCodeCSharpOutPath => Path.Combine(lubanPartyDir, "./Generated/Code/CSharp/");
    public string lubanCodeJsonOutPath => Path.Combine(lubanPartyDir, "./Generated/Code/Json/");
    public string lubanDataBytesOutPath => Path.Combine(lubanPartyDir, "./Generated/Data/Bytes");
    public string lubanDataJsonOutPath => Path.Combine(lubanPartyDir, "./Generated/Data/Json");
    
    public string lubanDataUnityPath => Path.Combine(lubanPartyDir, lubanPartyToUnityTbDataRelativeDir);

    public string arguments {
        get {
            bool isWin = CmdUtils.IsEnvWindows();
            return isWin ? arguments_win_code_csharp : arguments_mac_code_csharp;
        }
    }
    public string arguments_win_csharp_bin => $"{lubanDllPath} -t client -c cs-bin -d bin --conf {this.lubanDataCfgPath} -x outputCodeDir={lubanCodeCSharpOutPath} -x outputDataDir={lubanDataBytesOutPath}";
    public string arguments_mac_csharp_bin => $"\"{lubanDllPath}\" -t client -c cs-bin -d bin --conf \"{this.lubanDataCfgPath}\" -x outputCodeDir=\"{lubanCodeCSharpOutPath}\" -x outputDataDir=\"{lubanDataBytesOutPath}\"";
    
    public string arguments_win_all_json => $"{lubanDllPath} -t client -c cs-simple-json -d json --conf {this.lubanDataCfgPath} -x outputCodeDir={lubanCodeJsonOutPath} -x outputDataDir={lubanDataJsonOutPath}";
    public string arguments_mac_all_json => $"\"{lubanDllPath}\" -t client -c cs-simple-json -d json --conf \"{this.lubanDataCfgPath}\" -x outputCodeDir=\"{lubanCodeJsonOutPath}\" -x outputDataDir=\"{lubanDataJsonOutPath}\"";
    
    public string arguments_win_code_csharp => $"{lubanDllPath} -t client -c cs-bin --conf {this.lubanCodeCfgPath} -x outputCodeDir={lubanCodeCSharpOutPath}";
    public string arguments_mac_code_csharp => $"\"{lubanDllPath}\" -t client -c cs-bin --conf \"{this.lubanCodeCfgPath}\" -x outputCodeDir=\"{lubanCodeCSharpOutPath}\"";

    public void PrintPaths(GeneratorExecutionContext context) {
        var envInfo = $"projectDir: {projectDir}, \n lubanPartyDir:{this.lubanPartyDir}, \n cmdPath: {cmdPath}";
        LubanSerUtils.LogInContext(context, envInfo, "003");
    }
}